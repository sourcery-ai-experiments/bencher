[project]
name = "holobench"
version = "1.11.0"

authors = [{ name = "Austin Gregg-Smith", email = "blooop@gmail.com" }]
description = "A package for benchmarking the performance of arbitrary functions"
readme = "README.md"

#incompatible with setuptools
# requires-python = ">= 3.10"


dependencies = [
  "holoviews>=1.15,<=1.18.3",
  "numpy>=1.0,<=1.26.4",
  "param>=1.13.0,<=2.1.0",
  "hvplot>=0.8,<=0.9.2",
  "matplotlib>=3.6.3,<=3.8.3",
  "panel>=1.3.6,<=1.4.0",
  "diskcache>=5.6,<=5.6.3",
  "optuna>=3.2,<=3.6.1",
  "xarray>=2023.7,<=2024.3.0",
  "plotly>=5.15,<=5.20.0",
  "sortedcontainers>=2.4,<=2.4",
  "pandas>=2.0,<=2.2.1",
  "strenum>=0.4.0,<=0.4.15",
  "scikit-learn>=1.2,<=1.4.1.post1",
  "str2bool>=1.1,<=1.1",
  "scoop>=0.7.0,<=0.7.2.0",
  "moviepy>=1.0.3,<=1.0.3",
]

[project.optional-dependencies]
test = [
  "black>=23,<=24.1.1",
  "pylint>=2.16,<=3.0.3",
  "pytest-cov>=4.1,<=4.1",
  "pytest>=7.4,<=8.0.0",
  "hypothesis>=6.82,<=6.97.1",
  "ruff>=0.0.280,<=0.1.14",
  "coverage>=7.2.7,<=7.4.1",
]

[project.urls]
Repository = "https://github.com/dyson-ai/bencher"
Home = "https://github.com/dyson-ai/bencher"
Documentation = "https://bencher.readthedocs.io/en/latest/"


[tool.flit.module]
name = "bencher"


[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"


[tool.setuptools_scm]
# lol just to keep colcon happy

[tool.pylint]
extension-pkg-whitelist = ["numpy", "scipy"]
jobs = 16                                    #detect number of cores

[tool.pylint.'MESSAGES CONTROL']
disable = "C,logging-fstring-interpolation,line-too-long,fixme,broad-exception-caught,missing-module-docstring,too-many-instance-attributes,too-few-public-methods,too-many-arguments,too-many-locals,too-many-branches,too-many-statements,use-dict-literal,cyclic-import,duplicate-code,too-many-public-methods,too-many-nested-blocks"
enable = "no-else-return,consider-using-in"

[tool.black]
line-length = 100


[tool.ruff]
# Never enforce `E501` (line length violations).
#"F841" will auto remove unused variables which is annoying during development, pylint catches this anyway
lint.ignore = ["E501", "E902", "F841"]


# Same as Black.
line-length = 100

target-version = "py310"

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]


[tool.coverage.run]
omit = ["*/test/*", "__init__.py"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if False:",
  "if 0:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "(_):",
]
